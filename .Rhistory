plotlyOutput("network"),
verbatimTextOutput("click"),
verbatimTextOutput("event")
)
);
server <- function(input, output,session) {
output$network <- renderPlotly({
set.seed(1);
tc <- t[ , !(names(t) %in% c("week"))]
m <- abs(cor(tc))
# Problem 2.1, subset the matrix so that only correlations within
# the given range are used (correlations can be both positive and negative)
m <- apply(m, c(1,2), function(x){ifelse(x >= input$thresh, x, 0)})
countries <- colnames(m)
n <- network(m)
la <- network.layout.fruchtermanreingold(n, NULL)
country_points <- data.frame(x=la[,1],y=la[,2], country=countries);
event.data <- event_data("plotly_click")
edge_shapes <- list()
n <- length(country_points$country)
for(i in 1:n) {
for(j in 1:n) {
if (!is.na(m[i,j]) && m[i,j] > 0) {
width <- 1
# Problem 2.2, highlight the selected link by increasing its
# width to some larger than 1 value
# the information about which countries are selected will be
# in event.data$pointNumber
# this will be a 2D array containing the start and end points
# The is.na() function will be handy here
if(length(event.data) == 5){
if(i == event.data$pointNumber[[1]][1] + 1 && j == event.data$pointNumber[[1]][2] + 1){
width <- 3
}
}
edge_shape = list(
type = "line",
line = list(color = "#030303", width = width)
)
edge_shape[['x0']] = country_points$x[i];
edge_shape[['y0']] = country_points$y[i];
edge_shape[['x1']] = country_points$x[j];
edge_shape[['y1']] = country_points$y[j];
edge_shapes <- c(edge_shapes, list(edge_shape))
}
}
}
ax <- list(
showgrid = FALSE,
showticklabels = FALSE,
showline = FALSE,
zeroline = FALSE
);
net <- plot_ly(country_points, x=~x, y=~y, text=~country, xaxis=ax, yaxis=ax)
p <- layout(net,
shapes=edge_shapes, xaxis=ax, yaxis=ax)
});
output$plot <- renderPlotly({
tc <- t[ , !(names(t) %in% c("week"))]
m <- abs(cor(tc))
# Problem 2.1, subset the correlation matrix and display it as a heatmap
d2 <- melt(apply(m, c(1,2), function(x){ifelse(x >= input$thresh, x, 0)}))
colnames(d2) <- c("Country1","Country2","Coefficient")
ggplot(d2, aes(x=Country1, y=Country2, fill=Coefficient)) +
geom_tile() +
scale_fill_viridis() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
})
output$click <- renderPrint({
d <- event_data("plotly_click")
if (is.null(d) == T) return (NULL);
if (is.null(d)) "Click events appear here (double-click to clear)" else d
})
};
shinyApp(ui, server, options=list(height=1000))
countries <- unique(lst$country)
# calculate the correlation matrix
# without using the "week" columns
tc <- t[ , !(names(t) %in% c("week"))]
m <- abs(cor(tc))
ui <- fluidPage(
titlePanel("Correlations between flu incidences in different countries"),
sidebarPanel(
sliderInput(input="thresh", label="Correlation Coefficient Threshold:", min=0, max=1, value=0.5, step=0.1, ticks=T)
),
mainPanel(
plotlyOutput("plot"),
plotlyOutput("network"),
verbatimTextOutput("click"),
verbatimTextOutput("event")
)
);
server <- function(input, output,session) {
output$network <- renderPlotly({
set.seed(1);
tc <- t[ , !(names(t) %in% c("week"))]
m <- abs(cor(tc))
# Problem 2.1, subset the matrix so that only correlations within
# the given range are used (correlations can be both positive and negative)
m <- apply(m, c(1,2), function(x){ifelse(x >= input$thresh, x, 0)})
countries <- colnames(m)
n <- network(m)
la <- network.layout.fruchtermanreingold(n, NULL)
country_points <- data.frame(x=la[,1],y=la[,2], country=countries);
event.data <- event_data("plotly_click")
edge_shapes <- list()
n <- length(country_points$country)
for(i in 1:n) {
for(j in 1:n) {
if (!is.na(m[i,j]) && m[i,j] > 0) {
width <- 1
# Problem 2.2, highlight the selected link by increasing its
# width to some larger than 1 value
# the information about which countries are selected will be
# in event.data$pointNumber
# this will be a 2D array containing the start and end points
# The is.na() function will be handy here
if(length(event.data) == 5){
if(i == event.data$pointNumber[[1]][1] + 1 && j == event.data$pointNumber[[1]][2] + 1){
width <- 3
}
}
edge_shape = list(
type = "line",
line = list(color = "#030303", width = width)
)
edge_shape[['x0']] = country_points$x[i];
edge_shape[['y0']] = country_points$y[i];
edge_shape[['x1']] = country_points$x[j];
edge_shape[['y1']] = country_points$y[j];
edge_shapes <- c(edge_shapes, list(edge_shape))
}
}
}
ax <- list(
showgrid = FALSE,
showticklabels = FALSE,
showline = FALSE,
zeroline = FALSE
);
net <- plot_ly(country_points, x=~x, y=~y, text=~country, xaxis=ax, yaxis=ax)
p <- layout(net,
shapes=edge_shapes, xaxis=ax, yaxis=ax)
});
output$plot <- renderPlotly({
tc <- t[ , !(names(t) %in% c("week"))]
m <- abs(cor(tc))
# Problem 2.1, subset the correlation matrix and display it as a heatmap
d2 <- melt(apply(m, c(1,2), function(x){ifelse(x >= input$thresh, x, 0)}))
colnames(d2) <- c("Country1","Country2","Coefficient")
ggplot(d2, aes(x=Country1, y=Country2, fill=Coefficient)) +
geom_tile() +
scale_fill_viridis() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x=element_blank(),
axis.title.y=element_blank())
})
output$click <- renderPrint({
d <- event_data("plotly_click")
if (is.null(d) == T) return (NULL);
if (is.null(d)) "Click events appear here (double-click to clear)" else d
})
};
shinyApp(ui, server, options=list(height=1000))
shiny::runApp('Documents/Harvard DBMI/Courses/BMI 702 Fdns BMI II/nhanes_project/src/Cluster_NHANES')
genesummary <- read.delim("mageck_test.gene_summary.txt")
rib_genes <- genesummary[grepl("^RP", genesummary$id),]
rib_genes
rib_genes$neg.rank
hist(rib_genes$neg.rank)
dim(genesummary)
repcount <- read.delim("separate.count.txt")
repcount
cor(repcount$GSC_0131_Day0_Rep1,repcount$GSC_0131_Day0_Rep2)
plot(repcount$GSC_0131_Day0_Rep1,repcount$GSC_0131_Day0_Rep2)
cor(repcount$GSC_0131_Day23_Rep1,repcount$GSC_0131_Day23_Rep2)
plot(repcount$GSC_0131_Day23_Rep1,repcount$GSC_0131_Day23_Rep2)
gene_sum <- ReadRRA(genesummary, organism = "hsa")
library(MAGeCKFlute)
gene_sum <- ReadRRA(genesummary, organism = "hsa")
arrange(gene_sum,desc(LFC)) %>% head() # top positively selected genes
library(tidyverse)
gene_sum <- ReadRRA(genesummary, organism = "hsa")
arrange(gene_sum,desc(LFC)) %>% head() # top positively selected genes
arrange(gene_sum,LFC) %>% head() # top negatively selected genes
#num genes selected as positive
gene_sum %>% filter(LFC > 0) %>% nrow()
#num genes selected as negative
gene_sum %>% filter(LFC < 0) %>% nrow()
p1 = VolcanoView(gene_sum, x = "LFC", y = "FDR", Label = "Official")
print(p1)
geneList= gene_sum$LFC
names(geneList) = gene_sum$Official
p2 = RankView(geneList, top = 10, bottom = 10)
print(p2)
universe = gene_sum$EntrezID
geneList= gene_sum$LFC
names(geneList) = universe
enrich = enrich.GSE(geneList = geneList, type = "CORUM")
EnrichedGeneView(slot(enrich, "result"), geneList, keytype = "Entrez")
EnrichedGeneView(slot(enrich, "result"), geneList, keytype = "Entrez")
EnrichedGeneView(slot(enrich, "result"), geneList, keytype = "Entrez")
EnrichedGeneView(slot(enrich, "result"), geneList, keytype = "Entrez")
EnrichedGeneView(slot(enrich, "result"), geneList, keytype = "Entrez")
EnrichedGeneView(slot(enrich, "result"), geneList, keytype = "Entrez")
EnrichedGeneView(slot(enrich, "result"), geneList, keytype = "Entrez")
EnrichedGSEView(slot(enrich, "result"))
EnrichedView(slot(enrich, "result"))
essential_genes <- read.delim("data/PanEssential.txt")
gene_sum %>% colnames
gene_sum %>% head
essential_genes <- read.delim("data/PanEssential.txt")
neg_genes_df <- gene_sum %>%
filter(LFC > 0)
neg_genes <- neg_genes_df %>%
select(Official) %>%
.[!(. %in% essential)]
essential_genes <- read.delim("data/PanEssential.txt")
neg_genes_df <- gene_sum %>%
filter(LFC > 0)
neg_genes <- neg_genes_df %>%
select(Official) %>%
.[!(. %in% essential_genes)]
neg_genes_df <- neg_genes_df[order(neg_genes_df$pvalue),]
neg_genes
neg_genes_df
neg_genes_df %>% head
genesummary %>% head
essential_genes <- read.delim("data/PanEssential.txt")
neg_genes_df <- gene_sum %>%
filter(LFC > 0)
neg_genes <- neg_genes_df %>%
select(Official) %>%
.[!(. %in% essential_genes)]
neg_genes_df <- neg_genes_df %>%
filter(Official %in% essential_genes) %>%
arrange(FDR)
head(neg_genes_df,n=10)
neg_genes
essential_genes
head(essential_genes)
essential_genes <- read.delim("data/PanEssential.txt")
neg_genes_df <- gene_sum %>%
filter(LFC > 0)
neg_genes <- neg_genes_df %>%
select(Official) %>%
.[!(. %in% essential_genes$GeneSymbol)]
neg_genes_df <- neg_genes_df %>%
filter(Official %in% essential_genes) %>%
arrange(FDR)
head(neg_genes_df,n=10)
essential_genes <- read.delim("data/PanEssential.txt")
neg_genes_df <- gene_sum %>%
filter(LFC > 0)
neg_genes <- neg_genes_df %>%
select(Official) %>%
.[!(. %in% essential_genes$GeneSymbol)]
neg_genes_df <- neg_genes_df %>%
filter(Official %in% essential_genes$GeneSymbol) %>%
arrange(FDR)
head(neg_genes_df,n=10)
essential_genes <- read.delim("data/PanEssential.txt")
neg_genes_df <- gene_sum %>%
filter(LFC > 0) %>%
filter(Official %in% essential_genes$GeneSymbol) %>%
arrange(FDR)
head(neg_genes_df,n=10)
essential_genes <- read.delim("data/PanEssential.txt")
neg_genes_df <- gene_sum %>%
filter(LFC > 0) %>%
filter(Official %in% essential_genes$GeneSymbol) %>%
arrange(desc(FDR))
head(neg_genes_df,n=10)
essential_genes <- read.delim("data/PanEssential.txt")
neg_genes_df <- gene_sum %>%
filter(LFC > 0) %>%
filter(Official %in% essential_genes$GeneSymbol) %>%
arrange(FDR)
head(neg_genes_df,n=10)
#all
read_csv("top20mutprotz.csv")
#subtype 1
read_csv("top20mutprot1z.csv")
#subtype2
read_csv("top20mutprot2z.csv")
#all
read_csv("top20mutprotz.csv")
#subtype 1
read_csv("top20mutprot1z.csv")
#subtype2
read_csv("top20mutprot2z.csv")
library(plotly)
library(shiny)
library(tidyverse)
library(plotly)
library(crosstalk)
library(shinythemes)
library(viridis)
library(ggthemes)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = FALSE
)
sd <- SharedData$new(ocdr, key=~State)
p1 <- sd %>%
plot_mapbox(.,locationmode = 'USA-states') %>%
hide_legend() %>%
filter(Year == "2012", Var == "All Ages", !is.na(code)) %>%
add_trace(
z = ~Death_Rate, color=~Death_Rate, text = ~Location, locations = ~code,
colors = viridis(n=5,direction=-1)
) %>%
hide_colorbar() %>%
layout(
title = paste('Motor Vehicle Related Deaths', "All Ages",sep=", "),
geo = g
)
iddr <- read_csv("data/Impaired_Driving_Death_Rate__by_Age_and_Gender__2012___2014__All_States.csv")
ocdr_orig <- read_csv("data/Motor_Vehicle_Occupant_Death_Rate__by_Age_and_Gender__2012___2014__All_States.csv")
sebt <- read_csv("data/Percentage_of_Drivers_and_Front_Seat_Passengers_Wearing_Seat_Belts__2012___2014__All_States.csv")
codes <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv") %>%
select(code, state)
ocdr <- ocdr_orig %>%
mutate(code = codes$code[match(ocdr_orig$State,codes$state)]) %>%
gather(`All Ages, 2012`, `All Ages, 2014`, `Age 0-20, 2012`,`Age 0-20, 2014`,`Age 21-34, 2012`,`Age 21-34, 2014`,
`Age 35-54, 2012`,`Age 35-54, 2014`,`Age 55+, 2012`,`Age 55+, 2014`, `Male, 2012`,`Male, 2014`,
`Female, 2012`,`Female, 2014`, key="Var and Year", value="Death_Rate") %>%
separate(`Var and Year`, into = c("Var", "Year"), sep=", ") %>%
filter(!is.na(State))
ocdr_gender <- ocdr_orig %>%
mutate(code = codes$code[match(ocdr_orig$State,codes$state)]) %>%
filter(!is.na(State)) %>%
gather(`Male, 2012`,`Male, 2014`, `Female, 2012`,`Female, 2014`, key="GenderYr",value="Death_Rate") %>%
separate(GenderYr, into = c("Gender", "Year"), sep=", ") %>%
mutate(Age = "All Ages") %>%
select(State,Location,code,Age,Gender,Year,Death_Rate)
ocdr_tidy <- ocdr_orig %>%
mutate(code = codes$code[match(ocdr_orig$State,codes$state)]) %>%
filter(!is.na(State)) %>%
gather(`All Ages, 2012`, `All Ages, 2014`, `Age 0-20, 2012`,`Age 0-20, 2014`,`Age 21-34, 2012`,`Age 21-34, 2014`,
`Age 35-54, 2012`,`Age 35-54, 2014`,`Age 55+, 2012`,`Age 55+, 2014`, key="AgeYr",value="Death_Rate") %>%
separate(AgeYr, into = c("Age", "Year"), sep=", ") %>%
mutate(Gender = "All Genders") %>%
select(State,Location,code,Age,Year,Gender,Death_Rate) %>%
rbind(ocdr_gender)
setwd("~/Documents/Harvard DBMI/Courses/BMI 706 Data Visualization for Biomedical Data/bmi706-visualization-project")
iddr <- read_csv("data/Impaired_Driving_Death_Rate__by_Age_and_Gender__2012___2014__All_States.csv")
ocdr_orig <- read_csv("data/Motor_Vehicle_Occupant_Death_Rate__by_Age_and_Gender__2012___2014__All_States.csv")
sebt <- read_csv("data/Percentage_of_Drivers_and_Front_Seat_Passengers_Wearing_Seat_Belts__2012___2014__All_States.csv")
codes <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv") %>%
select(code, state)
ocdr <- ocdr_orig %>%
mutate(code = codes$code[match(ocdr_orig$State,codes$state)]) %>%
gather(`All Ages, 2012`, `All Ages, 2014`, `Age 0-20, 2012`,`Age 0-20, 2014`,`Age 21-34, 2012`,`Age 21-34, 2014`,
`Age 35-54, 2012`,`Age 35-54, 2014`,`Age 55+, 2012`,`Age 55+, 2014`, `Male, 2012`,`Male, 2014`,
`Female, 2012`,`Female, 2014`, key="Var and Year", value="Death_Rate") %>%
separate(`Var and Year`, into = c("Var", "Year"), sep=", ") %>%
filter(!is.na(State))
ocdr_gender <- ocdr_orig %>%
mutate(code = codes$code[match(ocdr_orig$State,codes$state)]) %>%
filter(!is.na(State)) %>%
gather(`Male, 2012`,`Male, 2014`, `Female, 2012`,`Female, 2014`, key="GenderYr",value="Death_Rate") %>%
separate(GenderYr, into = c("Gender", "Year"), sep=", ") %>%
mutate(Age = "All Ages") %>%
select(State,Location,code,Age,Gender,Year,Death_Rate)
ocdr_tidy <- ocdr_orig %>%
mutate(code = codes$code[match(ocdr_orig$State,codes$state)]) %>%
filter(!is.na(State)) %>%
gather(`All Ages, 2012`, `All Ages, 2014`, `Age 0-20, 2012`,`Age 0-20, 2014`,`Age 21-34, 2012`,`Age 21-34, 2014`,
`Age 35-54, 2012`,`Age 35-54, 2014`,`Age 55+, 2012`,`Age 55+, 2014`, key="AgeYr",value="Death_Rate") %>%
separate(AgeYr, into = c("Age", "Year"), sep=", ") %>%
mutate(Gender = "All Genders") %>%
select(State,Location,code,Age,Year,Gender,Death_Rate) %>%
rbind(ocdr_gender)
sd <- SharedData$new(ocdr, key=~State)
p1 <- sd %>%
plot_mapbox(.,locationmode = 'USA-states') %>%
hide_legend() %>%
filter(Year == "2012", Var == "All Ages", !is.na(code)) %>%
add_trace(
z = ~Death_Rate, color=~Death_Rate, text = ~Location, locations = ~code,
colors = viridis(n=5,direction=-1)
) %>%
hide_colorbar() %>%
layout(
title = paste('Motor Vehicle Related Deaths', "All Ages",sep=", "),
geo = g
)
p1 <- sd %>%
plot_geo(.,locationmode = 'USA-states') %>%
hide_legend() %>%
filter(Year == "2012", Var == "All Ages", !is.na(code)) %>%
add_trace(
z = ~Death_Rate, color=~Death_Rate, text = ~Location, locations = ~code,
colors = viridis(n=5,direction=-1)
) %>%
hide_colorbar() %>%
layout(
title = paste('Motor Vehicle Related Deaths', "All Ages",sep=", "),
geo = g
)
p2 <- sd %>%
plot_ly() %>%
filter(Year == "2012", Var == "All Ages") %>%
group_by(State) %>%
arrange(Death_Rate) %>%
hide_legend() %>%
add_bars(x=~State, y=~Death_Rate, marker = list(color = "grey"), name = "Death Rates") %>%
layout(xaxis= list(categoryorder = "array",
categoryarray = ~State),
barmode='overlay',
font=list(size=8))
sub2 <- subplot(p1, p2, nrows=1) %>%
layout(title="Motor Vehicle Related Deaths, Stratified")
sub2
sd <- #ocdr %>%
#filter(Year == "2012", Var == "All Ages", !is.na(code)) %>%
SharedData$new(ocdr, key=~State)
#base <- plot_ly(sd) %>% group_by(State) %>%
#  filter(Year == "2012", Var == "All Ages", !is.na(code))
p1 <- sd %>%
plot_geo(.,locationmode = 'USA-states') %>%
hide_legend() %>%
filter(Year == "2012", Var == "All Ages", !is.na(code)) %>%
add_trace(
z = ~Death_Rate, color=~Death_Rate, text = ~Location, locations = ~code,
colors = viridis(n=5,direction=-1)
) %>%
hide_colorbar() %>%
layout(
title = paste('Motor Vehicle Related Deaths', "All Ages",sep=", "),
geo = g
)
p2 <- sd %>%
plot_ly() %>%
hide_legend() %>%
filter(Year == "2012", Var == "All Ages") %>%
group_by(State) %>%
arrange(Death_Rate) %>%
hide_legend() %>%
add_bars(x=~State, y=~Death_Rate, marker = list(color = 'gray'), name = "Death Rates") %>%
layout(yaxis= list(categoryorder = "array",
categoryarray = ~State),
barmode='overlay' )
sub2 <- subplot(p1, p2, nrows=1) %>%
layout(title="Motor Vehicle Related Deaths, Stratified")
sub2
p1 <- sd %>%
plot_geo(.,locationmode = 'USA-states') %>%
hide_legend() %>%
filter(Year == "2012", Var == "All Ages", !is.na(code)) %>%
add_trace(
z = ~Death_Rate, color=~Death_Rate, text = ~Location, locations = ~code
#colors = viridis(n=5,direction=-1)
) %>%
hide_colorbar() %>%
layout(
title = paste('Motor Vehicle Related Deaths', "All Ages",sep=", "),
geo = g
)
p2 <- sd %>%
plot_ly() %>%
filter(Year == "2012", Var == "All Ages") %>%
group_by(State) %>%
arrange(Death_Rate) %>%
hide_legend() %>%
add_bars(x=~State, y=~Death_Rate, marker = list(color = "grey"), name = "Death Rates") %>%
layout(xaxis= list(categoryorder = "array",
categoryarray = ~State),
barmode='overlay',
font=list(size=8))
sub2 <- subplot(p1, p2, nrows=1) %>%
layout(title="Motor Vehicle Related Deaths, Stratified")
sub2
sd <- SharedData$new(ocdr, key=~State, "A")
p1 <- sd %>%
plot_geo(.,locationmode = 'USA-states') %>%
hide_legend() %>%
filter(Year == "2012", Var == "All Ages", !is.na(code)) %>%
add_trace(
z = ~Death_Rate, color=~Death_Rate, text = ~Location, locations = ~code
#colors = viridis(n=5,direction=-1)
) %>%
hide_colorbar() %>%
layout(
title = paste('Motor Vehicle Related Deaths', "All Ages",sep=", "),
geo = g
)
p2 <- sd %>%
plot_ly() %>%
filter(Year == "2012", Var == "All Ages") %>%
group_by(State) %>%
arrange(Death_Rate) %>%
hide_legend() %>%
add_bars(x=~State, y=~Death_Rate, marker = list(color = "grey"), name = "Death Rates") %>%
layout(xaxis= list(categoryorder = "array",
categoryarray = ~State),
barmode='overlay',
font=list(size=8),
dragmode = "select") %>%
highlight("plotly_selected")
sub2 <- subplot(p1, p2, nrows=1) %>%
layout(title="Motor Vehicle Related Deaths, Stratified")
sub2
